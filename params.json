{"name":"Guile","tagline":"Mirror of git://git.sv.gnu.org/guile.git","body":"This is version 2.0 of Guile, Project GNU's extension language library.\r\nGuile is an implementation of the Scheme programming language, packaged\r\nas a library that can be linked into applications to give them their own\r\nextension language.  Guile supports other languages as well, giving\r\nusers of Guile-based applications a choice of languages.\r\n\r\nPlease send bug reports to bug-guile@gnu.org.\r\n\r\nSee the LICENSE file for the specific terms that apply to Guile.  Note\r\nthat for any copyright year range specified as YYYY-ZZZZ in this\r\npackage, the range specifies every single year in that closed interval.\r\n\r\n\r\nAdditional INSTALL instructions ===========================================\r\n\r\nGeneric instructions for configuring and compiling Guile can be found\r\nin the INSTALL file.  Guile specific information and configure options\r\ncan be found below, including instructions for installing SLIB.\r\n\r\nGuile depends on the following external libraries.\r\n- libgmp\r\n- libiconv\r\n- libintl\r\n- libltdl\r\n- libunistring\r\n- libgc\r\n- libffi\r\nIt will also use the libreadline library if it is available.\r\n\r\nThere is a corresponding `--with-XXX-prefix' option for each of these\r\nlibraries (except for libgc and libffi which use `pkg-config', see\r\nbelow) that you can use when invoking ./configure, if you have these\r\nlibraries installed in a location other than the standard places (/usr\r\nand /usr/local).\r\n\r\nThese options are provided by the Gnulib `havelib' module, and details\r\nof how they work are documented in `Searching for Libraries' in the\r\nGnulib manual (http://www.gnu.org/software/gnulib/manual).  The extent\r\nto which they work on a given OS depends on whether that OS supports\r\nencoding full library path names in executables (aka `rpath').  Also\r\nnote that using these options, and hence hardcoding full library path\r\nnames (where that is supported), makes it impossible to later move the\r\nbuilt executables and libraries to an installation location other than\r\nthe one that was specified at build time.\r\n\r\nAnother possible approach is to set CPPFLAGS and LDFLAGS on the\r\nconfigure command-line, so that they include -I options for all the\r\nnon-standard places where you have installed header files and -L\r\noptions for all the non-standard places where you have installed\r\nlibraries.  This will allow configure and make to find those headers\r\nand libraries during the build.  E.g.:\r\n\r\n  ../configure [...] CPPFLAGS='-I/my/include' LDFLAGS='-L/my/lib'\r\n\r\nThe locations found will not be hardcoded into the build executables and\r\nlibraries, so with this approach you will probably also need to set\r\nLD_LIBRARY_PATH correspondingly, to allow Guile to find the necessary\r\nlibraries again at runtime.\r\n\r\n\r\nRequired External Packages ================================================\r\n\r\nGuile requires the following external packages:\r\n\r\n  - GNU MP, at least version 4.2\r\n\r\n    GNU MP is used for bignum arithmetic.  It is available from\r\n    http://gmplib.org/ .\r\n\r\n  - libltdl from GNU Libtool, at least version 1.5.6\r\n\r\n    libltdl is used for loading extensions at run-time.  It is\r\n    available from http://www.gnu.org/software/libtool/ .\r\n\r\n  - GNU libunistring, at least version 0.9.3\r\n\r\n    libunistring is used for Unicode string operations, such as the\r\n    `utf*->string' procedures.  It is available from\r\n    http://www.gnu.org/software/libunistring/ .\r\n\r\n  - libgc, at least version 7.0\r\n\r\n    libgc (aka. the Boehm-Demers-Weiser garbage collector) is the\r\n    conservative garbage collector used by Guile.  It is available\r\n    from http://www.hpl.hp.com/personal/Hans_Boehm/gc/ .\r\n\r\n  - libffi\r\n\r\n    libffi provides a \"foreign function interface\", used by the\r\n    `(system foreign)' module.  It is available from\r\n    http://sourceware.org/libffi/ .\r\n\r\n  - pkg-config\r\n\r\n    Guile's ./configure script uses pkg-config to discover the correct\r\n    compile and link options for libgc and libffi.  For this to work,\r\n    the `PKG_CONFIG_PATH' environment variable must be set to point to\r\n    the places where libgc's and libffi's `.pc' files can be found:\r\n\r\n      PKG_CONFIG_PATH=/path/to/libgc/lib/pkgconfig:/path/to/libffi/lib/pkgconfig\r\n\r\n    Alternatively, when pkg-config is not installed, you can work around\r\n    this by setting some variables as part of the configure\r\n    command-line:\r\n\r\n    - PKG_CONFIG=true\r\n\r\n    - BDW_GC_CFLAGS=<compile flags for picking up libgc headers>\r\n\r\n    - BDW_GC_LIBS=<linker flags for picking up the libgc library>\r\n\r\n    Note that because you're bypassing all pkg-config checks, you will\r\n    also have to specify libffi flags as well:\r\n\r\n    - LIBFFI_CFLAGS=<compile flags for picking up libffi headers>\r\n\r\n    - LIBFFI_LIBS=<linker flags for picking up the libffi library>\r\n\r\n\r\nSpecial Instructions For Some Systems =====================================\r\n\r\nWe would like Guile to build on all systems using the simple\r\ninstructions above, but it seems that a few systems still need special\r\ntreatment.  If you can send us fixes for these problems, we'd be\r\ngrateful.\r\n\r\n   <none yet listed>\r\n\r\nGuile specific flags Accepted by Configure =================================\r\n\r\nIf you run the configure script with no arguments, it should examine\r\nyour system and set things up appropriately.  However, there are a few\r\nswitches specific to Guile you may find useful in some circumstances.\r\n\r\n--without-threads  ---  Build without thread support\r\n\r\n  Build a Guile executable and library that supports multi-threading.\r\n\r\n  The default is to enable threading support when your operating\r\n  system offsers 'POSIX threads'.  When you do not want threading, use\r\n  `--without-threads'.\r\n\r\n--enable-deprecated=LEVEL\r\n\r\n  Guile may contain features that are `deprecated'.  When a feature is\r\n  deprecated, it means that it is still there, but that there is a\r\n  better way of achieving the same thing, and we'd rather have you use\r\n  this better way.  This allows us to eventually remove the old\r\n  implementation and helps to keep Guile reasonably clean of historic\r\n  baggage.\r\n\r\n  See the file NEWS for a list of features that are currently\r\n  deprecated.  Each entry will also tell you what you should replace\r\n  your code with.\r\n\r\n  To give you some help with this process, and to encourage (OK,\r\n  nudge) people to switch to the newer methods, Guile can emit\r\n  warnings or errors when you use a deprecated feature.  There is\r\n  quite a range of possibilities, from being completely silent to\r\n  giving errors at link time.  What exactly happens is determined both\r\n  by the value of the `--enable-deprecated' configuration option when\r\n  Guile was built, and by the GUILE_WARN_DEPRECATED environment\r\n  variable.\r\n\r\n  It works like this:\r\n\r\n    When Guile has been configured with `--enable-deprecated=no' (or,\r\n    equivalently, with `--disable-deprecated') then all deprecated\r\n    features are omitted from Guile.  You will get \"undefined\r\n    reference\", \"variable unbound\" or similar errors when you try to\r\n    use them.\r\n\r\n    When `--enable-deprecated=LEVEL' has been specified (for LEVEL not\r\n    \"no\"), LEVEL will be used as the default value of the environment\r\n    variable GUILE_WARN_DEPRECATED.  A value of \"yes\" is changed to\r\n    \"summary\" and \"shutup\" is changed to \"no\", however.\r\n\r\n    When GUILE_WARN_DEPRECATED has the value \"no\", nothing special\r\n    will happen when a deprecated feature is used.\r\n\r\n    When GUILE_WARN_DEPRECATED has the value \"summary\", and a\r\n    deprecated feature has been used, Guile will print this message at\r\n    exit:\r\n\r\n      Some deprecated features have been used.  Set the environment\r\n      variable GUILE_WARN_DEPRECATED to \"detailed\" and rerun the\r\n      program to get more information.  Set it to \"no\" to suppress\r\n      this message.\r\n\r\n    When GUILE_WARN_DEPRECATED has the value \"detailed\", a detailed\r\n    warning is emitted immediatly for the first use of a deprecated\r\n    feature.\r\n\r\n  The default is `--enable-deprecated=yes'.\r\n\r\n  In addition to setting GUILE_WARN_DEPRECATED in the environment, you\r\n  can also use (debug-enable 'warn-deprecated) and (debug-disable\r\n  'warn-deprecated) to enable and disable the detailed messaged at run\r\n  time.\r\n\r\n  Additionally, if your toolchain is new enough, you will receive\r\n  warnings at link time if you have a Guile extension that uses\r\n  deprecated functions provided by Guile.\r\n\r\n--disable-shared  ---  Do not build shared libraries.\r\n--disable-static  ---  Do not build static libraries.\r\n\r\n  Normally, both static and shared libraries will be built if your\r\n  system supports them.\r\n\r\n--enable-debug-freelist  ---  Enable freelist debugging.\r\n\r\n  This enables a debugging version of scm_cell and scm_double_cell,\r\n  and also registers an extra primitive, the setter\r\n  `gc-set-debug-check-freelist!'.\r\n\r\n  Configure with the --enable-debug-freelist option to enable the\r\n  gc-set-debug-check-freelist! primitive, and then use:\r\n\r\n  (gc-set-debug-check-freelist! #t)  # turn on checking of the freelist\r\n  (gc-set-debug-check-freelist! #f)  # turn off checking\r\n\r\n  Checking of the freelist forces a traversal of the freelist and a\r\n  garbage collection before each allocation of a cell.  This can slow\r\n  down the interpreter dramatically, so the setter should be used to\r\n  turn on this extra processing only when necessary.\r\n\r\n--enable-debug-malloc  ---  Enable malloc debugging.\r\n\r\n  Include code for debugging of calls to scm_malloc, scm_realloc, etc.\r\n\r\n  It records the number of allocated objects of each kind.  This is\r\n  useful when searching for memory leaks.\r\n\r\n  A Guile compiled with this option provides the primitive\r\n  `malloc-stats' which returns an alist with pairs of kind and the\r\n  number of objects of that kind.\r\n\r\n--enable-guile-debug  ---  Include internal debugging functions\r\n--disable-posix       ---  omit posix interfaces\r\n--disable-networking  ---  omit networking interfaces\r\n--disable-regex       ---  omit regular expression interfaces\r\n\r\n\r\nCross building Guile  =====================================================\r\n\r\nAs of Guile 2.0.x, the build process produces a library, libguile-2.0,\r\nalong with Guile \"object files\" containing bytecode to be interpreted by\r\nGuile's virtual machine.  The bytecode format depends on the endianness\r\nand word size of the host CPU.\r\n\r\nThus, when cross building Guile, you first need to configure, build and\r\ninstall it for your build host.\r\n\r\nThen, you may configure Guile for cross building:\r\n\r\n    ./configure --host=i686-pc-cygwin --disable-shared\r\n\r\nA C compiler for the build system is required.  If that doesn't suit it\r\ncan be specified with the CC_FOR_BUILD variable in the usual way, for\r\ninstance:\r\n\r\n    ./configure --host=m68k-unknown-linux-gnu CC_FOR_BUILD=/my/local/gcc\r\n\r\nGuile for the build system can be specified similarly with the\r\nGUILE_FOR_BUILD variable, which defaults to whatever `guile' executable\r\nis found in $PATH.  It must have the exact same version has the Guile\r\nthat you intend to cross-build.\r\n\r\n\r\nUsing Guile Without Installing It =========================================\r\n\r\nThe \"meta/\" subdirectory of the Guile sources contains a script called\r\n\"guile\" that can be used to run the Guile that has just been built. Note\r\nthat this is not the same \"guile\" as the one that is installed; this\r\n\"guile\" is a wrapper script that sets up the environment appropriately,\r\nthen invokes the Guile binary.\r\n\r\nYou may also build external packages against an uninstalled Guile build\r\ntree. The \"uninstalled-env\" script in the \"meta/\" subdirectory will set\r\nup an environment with a path including \"meta/\", a modified dynamic\r\nlinker path, a modified PKG_CONFIG_PATH, etc.\r\n\r\nFor example, you can enter this environment via invoking\r\n\r\n    meta/uninstalled-env bash\r\n\r\nWithin that shell, other packages should be able to build against\r\nuninstalled Guile.\r\n\r\n\r\nInstalling SLIB ===========================================================\r\n\r\nIn order to use SLIB from Guile you basically only need to put the\r\n`slib' directory _in_ one of the directories on Guile's load path.\r\n\r\nThe standard installation is:\r\n\r\n  1. Obtain slib from http://www-swiss.ai.mit.edu/~jaffer/SLIB.html\r\n\r\n  2. Put it in Guile's data directory, that is the directory printed when\r\n     you type\r\n\r\n       guile-config info pkgdatadir\r\n\r\n     at the shell prompt.  This is normally `/usr/local/share/guile', so the\r\n     directory will normally have full path `/usr/local/share/guile/slib'.\r\n\r\n  3. Start guile as a user with write access to the data directory and type\r\n\r\n       (use-modules (ice-9 slib))\r\n\r\n     at the Guile prompt.  This will generate the slibcat catalog next to\r\n     the slib directory.\r\n\r\nSLIB's `require' is provided by the Guile module (ice-9 slib).\r\n\r\nExample:\r\n\r\n  (use-modules (ice-9 slib))\r\n  (require 'primes)\r\n  (prime? 7)\r\n\r\n\r\nGuile Documentation ==================================================\r\n\r\nThe Guile Reference Manual (guile.info) is the primary documentation for\r\nGuile.  A copy of the R5RS Scheme specification is included too\r\n(r5rs.info).\r\n\r\nInfo format versions of this documentation are installed as part of\r\nthe normal build process.  The texinfo sources are under the doc\r\ndirectory, and other formats like Postscript, PDF, DVI or HTML can be\r\ngenerated from them with Tex and Texinfo tools.\r\n\r\nThe doc directory also includes an example-smob subdirectory which has\r\nthe example code from the \"Defining New Types (Smobs)\" chapter of the\r\nreference manual.\r\n\r\nThe Guile WWW page is at\r\n\r\n  http://www.gnu.org/software/guile/guile.html\r\n\r\nIt contains a link to the Guile FAQ.\r\n\r\nAbout This Distribution ==============================================\r\n\r\nInteresting files include:\r\n\r\n- LICENSE, which contains the exact terms of the Guile license.\r\n- COPYING.LESSER, which contains the terms of the GNU Lesser General Public License.\r\n- COPYING, which contains the terms of the GNU General Public License.\r\n- INSTALL, which contains general instructions for building/installing Guile.\r\n- NEWS, which describes user-visible changes since the last release of Guile.\r\n\r\nFiles are usually installed according to the prefix specified to\r\nconfigure, /usr/local by default.  Building and installing gives you:\r\n\r\nExecutables, in ${prefix}/bin:\r\n\r\n guile --- a stand-alone interpreter for Guile.  With no arguments, this\r\n \tis a simple interactive Scheme interpreter.  It can also be used\r\n \tas an interpreter for script files; see the NEWS file for details.\r\n guile-config --- a Guile script which provides the information necessary\r\n \tto link your programs against the Guile library.\r\n guile-snarf --- a script to parse declarations in your C code for\r\n \tScheme-visible C functions, Scheme objects to be used by C code,\r\n \tetc.\r\n\r\nLibraries, in ${prefix}/lib.  Depending on the platform and options\r\n        given to configure, you may get shared libraries in addition\r\n\tto or instead of these static libraries:\r\n\r\n libguile.a --- an object library containing the Guile interpreter,\r\n \tYou can use Guile in your own programs by linking against this.\r\n libguilereadline.a --- an object library containing glue code for the\r\n        GNU readline library.\r\n\r\n libguile-srfi-*.a --- various SRFI support libraries\r\n\r\nHeader files, in ${prefix}/include:\r\n\r\n libguile.h, guile/gh.h, libguile/*.h --- for libguile.\r\n guile-readline/readline.h --- for guile-readline.\r\n\r\nSupport files, in ${prefix}/share/guile/<version>:\r\n\r\n ice-9/* --- run-time support for Guile: the module system,\r\n \tread-eval-print loop, some R4RS code and other infrastructure.\r\n oop/* --- the Guile Object-Oriented Programming System (GOOPS)\r\n scripts/* --- executable modules, i.e., scheme programs that can be both\r\n \tcalled as an executable from the shell, and loaded and used as a\r\n \tmodule from scheme code.  See scripts/README for more info.\r\n srfi/* --- SRFI support modules.  See srfi/README for more info.\r\n\r\nAutomake macros, in ${prefix}/share/aclocal:\r\n\r\n guile.m4\r\n\r\nDocumentation in Info format, in ${prefix}/info:\r\n\r\n guile --- Guile reference manual.\r\n\r\n guile-tut --- Guile tutorial.\r\n\r\n GOOPS --- GOOPS reference manual.\r\n\r\n r5rs --- Revised(5) Report on the Algorithmic Language Scheme.\r\n\r\n\r\nThe Guile source tree is laid out as follows:\r\n\r\nlibguile:\r\n\tThe Guile Scheme interpreter --- both the object library\r\n\tfor you to link with your programs, and the executable you can run.\r\nice-9:  Guile's module system, initialization code, and other infrastructure.\r\nguile-config:\r\n\tSource for the guile-config script.\r\nguile-readline:\r\n        The glue code for using GNU readline with Guile.  This\r\n        will be build when configure can find a recent enough readline\r\n        library on your system.\r\ndoc:\tDocumentation (see above).\r\n\r\nGit Repository Access ================================================\r\n\r\nGuile's source code is stored in a Git repository at Savannah.  Anyone\r\ncan access it using `git-clone' from one of the following URLs:\r\n\r\n  git://git.sv.gnu.org/guile.git\r\n  http://git.sv.gnu.org/r/guile.git\r\n\r\nDevelopers with a Savannah SSH account can also access it from:\r\n\r\n  ssh://git.sv.gnu.org/srv/git/guile.git\r\n\r\nThe repository can also be browsed on-line at the following address:\r\n\r\n  http://git.sv.gnu.org/gitweb/?p=guile.git\r\n\r\nFor more information on Git, please see:\r\n\r\n  http://git.or.cz/\r\n\r\nPlease send problem reports to <bug-guile@gnu.org>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}