(use-modules
 (test-suite lib)
 (language cps)
 (language cps compile-rtl))

(define-syntax-rule (cps x)
  (cps->program (parse-cps 'x)))

;; (lambda () 3)
(pass-if "return-three"
  (= 3
     ((cps (lambda ()
             (letval (val) (3)
               (call return #f (val))))))))

(define (return-three) 3)

;; (lambda (x) (x))
(pass-if "call-arg"
  (= 3
     ((cps (lambda (x) (call x return ())))
      return-three)))

(define (add-two x) (+ x 2))

;; (lambda (x y) (x (y)))
(pass-if "single-value compose"
  (= 5
     ((cps (lambda (x y)
             (letcont (c1)
               ((lambda (r) (call x return (r))))
               (call y c1 ()))))
      add-two
      return-three)))

;; (lambda (k x) (k x)) <= (lambda (x) x)
(pass-if "identity function"
  (= 3
     ((cps (lambda (x) (call return #f (x))))
      3)))

;; (lambda (x) (if x 1 2))
(pass-if "if"
  (= 1
     ((cps (lambda (x)
             (letval (one two) (1 2)
               (if x (call return #f (one))
                   (call return #f (two))))))
      #t)))

