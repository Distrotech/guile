(use-modules
 (test-suite lib)
 (language cps compile-rtl)
 (srfi srfi-8)) ;; receive

(pass-if "return-three"
  (= 3
     ((cps-compile '(lambda () 3)))))

(define (return-three) 3)

(pass-if "call-arg"
  (= 3
     ((cps-compile '(lambda (x) (x)))
      return-three)))

(define (add-two x) (+ x 2))

(pass-if "single-value compose"
  (= 5
     ((cps-compile '(lambda (x y) (x (y))))
      add-two
      return-three)))

(pass-if "identity function"
  (= 3
     ((cps-compile '(lambda (x) x))
      3)))

(define if-func
  (cps-compile '(lambda (x) (if x 1 2))))

(pass-if "if true"
  (= 1 (if-func #t)))

(pass-if "if false"
  (= 2 (if-func #f)))

(define *foo* 6)
(pass-if "toplevel-ref"
  (= 6
     ((cps-compile '(lambda () *foo*)))))

(pass-if "toplevel-set"
  (= 12
     (begin
       ((cps-compile '(lambda () (set! *foo* 12))))
       *foo*)))

(pass-if "lexical-set"
  (= 5
     ((cps-compile '(lambda (x) (set! x 5))) 3)))

(pass-if "call 0"
  (= 0
     ((cps-compile '(lambda () (+))))))

(pass-if "call 1"
  (= 1
     ((cps-compile '(lambda () (+ 1))))))

(pass-if "call 2"
  (= 3
     ((cps-compile '(lambda () (+ 1 2))))))

(pass-if "call 3"
  (= 6
     ((cps-compile '(lambda () (+ 1 2 3))))))

(pass-if "call 4"
  (= 10
     ((cps-compile '(lambda () (+ 1 2 3 4))))))

(pass-if "call 5"
  (= 15
     ((cps-compile '(lambda () (+ 1 2 3 4 5))))))

(pass-if "call 6"
  (= 21
     ((cps-compile '(lambda () (+ 1 2 3 4 5 6))))))

(pass-if "sequences"
  (= 5
     ((cps-compile '(lambda (x) (set! x 5) x)) 3)))

(pass-if "let"
  (= 1
     ((cps-compile '(lambda () (let ((x 1) (y 2)) x))))))

(pass-if "closure-ref"
  (= 12
     (((cps-compile '(lambda (x) (lambda () x))) 12))))

(pass-if "closure-ref from let"
  (= 12
     (((cps-compile '(lambda () (let ((x 12)) (lambda () x))))))))

(pass-if "closure-set!"
  (= 12
     (((cps-compile '(lambda ()
                       (let ((x 5))
                         (lambda ()
                           (set! x 12)
                           x))))))))

(pass-if "module-ref"
  (eq? ((cps-compile '(lambda ()
                      (@ (language cps compile-rtl) cps-compile))))
       cps-compile))
